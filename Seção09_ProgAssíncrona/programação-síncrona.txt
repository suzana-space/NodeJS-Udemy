* PROGRAMAÇÃO SÍNCRONA *

O QUE É PROGRAMAÇÃO SÍNCRONA:

-> Execução sequencial: As intruções são executadas uma após a outra, em ordem. 
-> Bloqueio de operações: O programa aguarda a conclusão de uma operação antes de prosseguir. 
-> Tempo de execução limitado: A execução síncrona pode ser mais rápida em determinadas situações, 
pois não hásobrecarga de 
gerenciamento de eventos ou tarefas paralelas. 
-> Comportamento previsível: O fluxo de execução é determinístico e previsível, 
facilitando a compreensão e depuração do código. 

O PROBLEMA DA PROGRAMAÇÃO SÍNCRONA: 

-> Ineficiência do uso de recursos
-> Estabilidade limitada
-> Bloqueio de operações
-> Menor capacidade de resposta

CALLBACKS: 

-> Callback é uma função que é passada como argumento para outra função e é executada após a conclusão de uma determinada operação assíncrona

function doAnyThing(callback){
    console.log("Executando uma operação")
        setTimeout(()=>{   
            console.log("operação concluida")
            callback()}, 8000)
}

function callback(){
    console.log("ação apos a operação ser concluida")
}

doAnyThing(callback)

PARÂMETROS EM CALLBACKS: 

function doAnyThing2(callback2){
    console.log("Executando uma operação 2")
    temp_segs = 5000
    setTimeout(()=>{
        console.log("operação concluida 2")
        callback2("Ativo", temp_segs/1000)
    }, temp_segs)
}

function callback2(status, tempo){
    console.log(`tempo da operação foi de segundos foi de ${tempo} segundos e o status é ${status}.`)
}

doAnyThing2(callback2)

Cadastro feito com sucesso. Agradecemos sua paciência. 

